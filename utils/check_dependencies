#!/bin/bash

########################################################################################
#                                                                                      #
# check_dependencies: Checks that module dependencies are OK in the ONETEP Makefile    #
#                                                                                      #
# Written on 2010.12.15 by Jacek Dziedzic (jd12g09@soton.ac.uk)                        #
# v1.12                                                                                #
#                                                                                      #
########################################################################################

# Revision history:
#       1.00 jd, original version
#       1.04 jd, welcome banner, preprocessing and -o added, -DMPI for default cppopts
#       1.05 jd, Quintin's fix for tr warning
#       1.06 jd, correctly eliminates .F90 files from dependency list, even if preceded by .o files
#       1.07 jd, improved help
#       1.08 jd, reordered output
#       1.10 jd, gives names of .o files that need to be added or removed
#       1.11 jd, fixed formatting in -v mode
#       1.12 jd, works OK even if 'use' uses upper- or mixed-case (as is the case for esdf_mod.F90)

srcdir="../src" # default

warnon() {
  if [ $fancy_terminal -eq 1 ]; then
    setterm -bold on
    setterm -reverse on
  fi
}

warnoff() {
  if [ $fancy_terminal -eq 1 ]; then
    setterm -bold off
    setterm -reverse off
  fi
}

abort() {
  echo "Aborting!" >&2
  echo >&2
  exit $errcode
}

syntax_help() {
  echo "The correct syntax is: check_dependencies [-x] [-v] [-h] [-o cppopts]" >&2
  echo "-x turns off the fancy terminal bold/reverse, which might be useful " >&2 
  echo "   when redirecting output to a file." >&2
  echo "-v turns on verbose mode, where more details are shown." >&2 
  echo "-h shows this help message and exits." >&2 
  echo "-o lets you specify non-standard preprocessor #defines, say," >&2
  echo "   -o \"-DACCELRYS -DMPI\" will check dependencies for an ACCELRYS build with MPI." >&2
  echo "   The default set of #defines is \"$cppopts\"." >&2
}


##########################################################################################
fancy_terminal=1
verbose=0
cppopts="-DMPI" # default

# Introduce myself
tail -n +3 $0 2>/dev/null | head -n 9 2>/dev/null

# Parse options, if any
while getopts "o:xvh" flag; do
  if [ "$flag" == "?" ] || [ "$flag" == "h" ] ; then
    [ "$flag" == "h" ] || echo "Improper invocation." >&2
    syntax_help
    errcode=1; abort
  fi
  if [ "$flag" == "o" ]; then cppopts=$OPTARG; fi
  if [ "$flag" == "x" ]; then fancy_terminal=0; fi
  if [ "$flag" == "v" ]; then verbose=1; fi
done

echo "Dependencies for the following compilation options: \"$cppopts\""
echo

# Allow operation from the top-level directory
if [ -d "src" ]; then
  srcdir="./src"
fi
 
# Go!
at_least_one_broken=0
for f in $srcdir/*.F90; do
  if [ ! -r $f ]; then
    echo "! No readable *.F90 files found in $srcdir, nothing to do!" >&2
    exit
  fi
  echo "$f:" | awk '{printf("%-36s\t",$0)}'
  # Determine all modules specified in use clauses in current source:
  allused=`cat $f | cpp $cppopts 2>/dev/null \
    | sed "s/!.*//" | grep -iE "^ *use " | awk '{print $2}' \
    | tr "," " " | sed "s/only//g" | awk '{print $1}' \
    | tr "ABCDEFGHIJKLMNOPQRSTUVWXYZ" "abcdefghijklmnopqrstuvwxyz" | sort | uniq`
  if [ $verbose == 1 ]; then 
    allused_printfriendly=`echo $allused | tr "\n" " " | awk '{if(NF==0) print "(none)"; else print $0}'`
    echo
    echo "Needs:         $allused_printfriendly"
  fi
  # Determine the basename of the .o file for the current source
  ofile=`echo $f | sed -e "s/\.F90/.o/" -e "s/.*\///"`
  # Determine the first line in the Makefile that corresponds to this .o
  linenumber=`grep -nE "^$ofile:" $srcdir/Makefile | tr ":" " " | awk '{print $1}'`
  if [ -z "$linenumber" ]; then
     echo "*** $f absent in the Makefile, ignoring"
     continue
  fi
  # Extract this line and all subsequent lines, provided they end with '\', from the Makefile
  relevantmakefilebit=`cat $srcdir/Makefile | sed "s/#.*//" | awk -v n=$linenumber 'NR>=n {if(NF==0) exit; if($NF ~ "\\\") continuation=1; else continuation=0; if(continuation>=0) {print $0; continuation--}}'`
  # Tidy it up: remove everything in front of ":", remove \, remove F90 files. 
  # NB: [\\] avoids tr warning about trailing backslashes
  alldeclared=`echo $relevantmakefilebit | sed -e "s/.*: //" -e "s/[\\]/ /g" -e "s/   / /g" | sed -r "s/[^ ]*F90 *//g" | sort | uniq`
  # For all the .o files in the declared list: find the corresponding module name
  modulelist=""
  is_ok=1
  for o in $alldeclared; do
    sourcefile=$srcdir/`echo $o | sed "s/\.o/.F90/"`
    if [ ! -r "$sourcefile" ]; then
      is_ok="-1"
      echo -e "CRITICAL ERROR"
      echo -e "\tWARNING: $sourcefile (needed to build $o, a dependency of $f) not found or not readable."
    else
      # Determine the module name: look for all lines beginning with module or MODULE, take the word after this, lowercase it, 
      # pick the first one if there are more (this could happen because of #ifdefs)
      module_of_o=`grep -iE "^module " $sourcefile | tr "ABCDEFGHIJKLMNOPQRSTUVWXYZ" "abcdefghijklmnopqrstuvwxyz" | awk '{print $2}' | head -n 1`
      modulelist="$modulelist $module_of_o"
    fi
  done
  modulelist=`echo $modulelist | tr " " "\n" | sort | uniq | tr "\n" " "`
  if [ $verbose == 1 ]; then 
    modulelist_printfriendly=`echo $modulelist | awk '{if(NF==0) print "(none)"; else print $0}'`
    echo "Makefile says: $modulelist_printfriendly" 
  fi

  # Check for missing dependencies
  for used in $allused; do
    if [ "`echo $modulelist | awk -v used="$used" '{for(i=1;i<=NF;++i) if($i == used) {print "ok"; exit}}'`" != "ok" ]; then
      [ $is_ok -gt 0 ] && echo -e "BROKEN"
      is_ok=0
      echo -ne "\tMissing dependency: "
      warnon
      echo -n "$used "
      for sourcefile in $srcdir/*.F90; do
        # Determine the module name: look for all lines beginning with module or MODULE, take the word after this, lowercase it, 
        # pick the first one if there are more (this could happen because of #ifdefs)
        module_for_this_f90=`grep -iE "^module " $sourcefile | tr "ABCDEFGHIJKLMNOPQRSTUVWXYZ" "abcdefghijklmnopqrstuvwxyz" | awk '{print $2}' | head -n 1`
        found_o=0
        if [ "$module_for_this_f90" == "$used" ]; then
          required_o=`echo $sourcefile | sed "s/\.F90/.o/" | xargs basename`
          echo "($required_o)"
          found_o=1
          break
        fi
      done
      [ $found_o -eq 1 ] || echo "(could not determine corresponding .o file)"
      warnoff
    fi
  done

  # Check for unnecessary dependencies
  for specified in $modulelist; do
    if [ "`echo $allused | awk -v specified="$specified" '{for(i=1;i<=NF;++i) if($i == specified) {print "ok"; exit}}'`" != "ok" ]; then
      [ $is_ok -gt 0 ] && echo -e "BROKEN"
      is_ok=0
      echo -ne "\tUnnecessary dependency: "
      warnon
      echo -n "$specified "
      for sourcefile in $srcdir/*.F90; do
        # Determine the module name: look for all lines beginning with module or MODULE, take the word after this, lowercase it, 
        # pick the first one if there are more (this could happen because of #ifdefs)
        module_for_this_f90=`grep -iE "^module " $sourcefile | tr "ABCDEFGHIJKLMNOPQRSTUVWXYZ" "abcdefghijklmnopqrstuvwxyz" | awk '{print $2}' | head -n 1`
        found_o=0
        if [ "$module_for_this_f90" == "$specified" ]; then
          required_o=`echo $sourcefile | sed "s/\.F90/.o/" | xargs basename`
          echo "($required_o)"
          found_o=1
          break
        fi
      done
      [ $found_o -eq 1 ] || echo "(could not determine corresponding .o file)"
      warnoff
    fi
  done
  if [ $is_ok -eq 1 ]; then 
    verdict="OK"
  else
    verdict=""
    at_least_one_broken=1
  fi
  echo -e "$verdict"
done

echo
echo "Done!"
[ $at_least_one_broken -eq 1 ] || echo "Hurray, your Makefile is in order!" && exit 0
[ $at_least_one_broken -eq 1 ] && echo "Some problems remain." && exit 1